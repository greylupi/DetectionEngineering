UserLoginEvents
| join kind=inner UserProfiles on UserId
| where Location !~ UserLocation
| project-away UserId1, UserName1

  Alternative Approaches When UserId Is not Available
If UserId isn't a shared column, we can still perform an inner join using a combination of UserName and Domain.

UserLoginEvents
| extend Domain = tolower(strcat_delim('.', DomainName, DomainSuffix))
|join kind=inner UserProfiles on UserName, Domain
|where Location !~ UserLocation
|project-away UserId1, UserName1, Domain1


Creating an Account field that is a combination of user name and domain information in both tables:

UserLoginEvents
| extend Account = tolower(strcat(UserName, '@', DomainName, '.', DomainSuffix))
| join kind=inner (
    UserProfiles
    | extend Account = tolower(strcat(UserName, '@', Domain))
    )
     on Account
| where Location !~ UserLocation
| project-away UserId1, UserName1


for readiability and convenience:

// table as a variable
let login_events = 
    UserLoginEvents
    | extend Account = tolower(strcat(UserName, '@', DomainName, '.', DomainSuffix)) // using strcat function since we need to use "@" and "." as delimiter
;
// table as a variable
let user_profiles = 
    UserProfiles
    | extend Account = tolower(strcat(UserName, '@', Domain))
;
// we can now join two tables we defined 
login_events
| join kind=inner user_profiles on Account
| where Location !~ UserLocation  // case insensitive inequality for accurate results
| project-away UserId1, UserName1 // remove duplicate and unneccessary columns from the result
